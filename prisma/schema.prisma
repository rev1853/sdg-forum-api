// ---------------------------------------------------------
// Prisma setup
// ---------------------------------------------------------
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// ---------------------------------------------------------
// Enums
// ---------------------------------------------------------
enum ThreadStatus {
    ACTIVE
    REMOVED
}

enum InteractionType {
    LIKE
    REPOST
}

// Optional: if you want to standardize report reasons, switch reasonCode to this
// enum ReasonCode {
//   SPAM
//   ABUSE
//   OFFTOPIC
//   COPYRIGHT
//   OTHER
// }

// ---------------------------------------------------------
// Models
// ---------------------------------------------------------

model User {
    id              String   @id @default(cuid())
    email           String   @unique
    username        String   @unique
    name            String?
    password_hash   String
    profile_picture String? // URL
    created_at      DateTime @default(now())

    // relations
    threads       Thread[]        @relation("ThreadAuthor")
    interactions  Interaction[]
    reportsFiled  Report[]        @relation("ReportReporter")
    resetTokens   PasswordResetToken[]

    @@index([username])
    @@index([created_at])
}

model Category {
    id         String   @id @default(cuid())
    name       String   @unique
    sdg_number Int // (1..17 ideally; enforce in app or with DB CHECK if needed)
    created_at DateTime @default(now())

    threads ThreadCategory[]

    @@index([sdg_number])
    @@index([created_at])
}

model Thread {
    id         String       @id @default(cuid())
    author_id  String
    parent_thread_id String?
    title      String
    body       String
    image      String?
    tags       Json         @default("[]")
    status     ThreadStatus @default(ACTIVE)
    created_at DateTime     @default(now())
    updated_at DateTime     @updatedAt

    author       User            @relation("ThreadAuthor", fields: [author_id], references: [id], onDelete: Cascade)
    parent       Thread?         @relation("ThreadReplies", fields: [parent_thread_id], references: [id], onDelete: Cascade)
    replies      Thread[]        @relation("ThreadReplies")
    categories   ThreadCategory[]
    interactions Interaction[]
    reports      Report[]        @relation("ThreadReports")

    @@index([author_id])
    @@index([parent_thread_id])
    @@index([status])
    @@index([created_at])
}

model ThreadCategory {
    thread_id   String
    category_id String

    thread   Thread   @relation(fields: [thread_id], references: [id], onDelete: Cascade)
    category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

    @@id([thread_id, category_id])
    @@index([category_id])
}

model Interaction {
    id         String          @id @default(cuid())
    thread_id  String
    user_id    String
    type       InteractionType
    created_at DateTime        @default(now())

    thread Thread @relation(fields: [thread_id], references: [id], onDelete: Cascade)
    user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

    // One interaction type per user per thread (e.g., one LIKE)
    @@unique([thread_id, user_id, type])
    @@index([user_id])
    @@index([type])
    @@index([created_at])
}

model Report {
    id          String   @id @default(cuid())
    thread_id   String
    reporter_id String
    reason_code String // or switch to enum ReasonCode
    message     String?
    created_at  DateTime @default(now())

    reporter User   @relation("ReportReporter", fields: [reporter_id], references: [id], onDelete: Cascade)
    thread   Thread @relation("ThreadReports", fields: [thread_id], references: [id], onDelete: Cascade)

    @@index([thread_id])
    @@index([reporter_id])
    @@index([created_at])
}

model PasswordResetToken {
    id          String   @id @default(cuid())
    user_id     String
    token_hash  String   @unique
    expires_at  DateTime
    used_at     DateTime?
    created_at  DateTime @default(now())

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id])
    @@index([expires_at])
}
